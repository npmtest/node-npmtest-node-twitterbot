{"/home/travis/build/npmtest/node-npmtest-node-twitterbot/test.js":"/* istanbul instrument in package npmtest_node_twitterbot */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-twitterbot/lib.npmtest_node_twitterbot.js":"/* istanbul instrument in package npmtest_node_twitterbot */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_twitterbot = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_twitterbot = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-twitterbot/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-twitterbot && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_twitterbot */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_twitterbot\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_twitterbot.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_twitterbot.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_twitterbot.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_twitterbot.__dirname + '/lib.npmtest_node_twitterbot.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-twitterbot/node_modules/node-twitterbot/lib/twitterbot.js":"// ================================================\n// node-twitterbot - version 0.2.2 \n// A NodeJS module for creating Twitter Bots\n// Nathaniel Kirby (nate@projectspong.com)\n// https://github.com/nkirbygr/node-twitterbot\n// ================================================\n\n(function() {\n  var Twit, TwitterBot, TwitterBotAction, TwitterBotStreamAction, eventEmitter, fs, _ref,\n    __hasProp = {}.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\n  fs = require('fs');\n\n  Twit = require('twit');\n\n  eventEmitter = require('events').EventEmitter;\n\n  TwitterBot = (function(_super) {\n    __extends(TwitterBot, _super);\n\n    function TwitterBot(configOrFile) {\n      var e;\n      if (typeof configOrFile === \"string\") {\n        try {\n          this.config = JSON.parse(fs.readFileSync(configOrFile));\n        } catch (_error) {\n          e = _error;\n          throw e;\n        }\n      } else {\n        this.config = configOrFile;\n      }\n      this.actions = [];\n      this.streamAction = new TwitterBotStreamAction(function() {\n        return this.start();\n      }, this);\n      this.setupTwit();\n    }\n\n    TwitterBot.prototype.setupTwit = function() {\n      this.twitter = new Twit({\n        consumer_secret: this.config.consumer_secret,\n        consumer_key: this.config.consumer_key,\n        access_token: this.config.access_token,\n        access_token_secret: this.config.access_token_secret\n      });\n      return this;\n    };\n\n    TwitterBot.prototype.tweet = function(text, callback) {\n      if (typeof text !== \"string\") {\n        return callback({\n          message: \"Cannot post a non-string\"\n        }, null);\n      }\n      return this.twitter.post(\"statuses/update\", {\n        status: text\n      }, function(err, response) {\n        if (callback && typeof callback === \"function\") {\n          return callback(err, response);\n        }\n      });\n    };\n\n    TwitterBot.prototype.addAction = function(actionName, callback) {\n      var action,\n        _this = this;\n      if (typeof callback === \"function\") {\n        action = new TwitterBotAction(callback, this);\n      } else {\n        action = callback;\n      }\n      action.name = actionName;\n      this.actions.push(action);\n      this.on(actionName, function(params) {\n        return action.emit(\"action\", params);\n      });\n      return action;\n    };\n\n    TwitterBot.prototype.removeAction = function(actionName) {\n      var index;\n      this.removeAllListeners(actionName);\n      index = this.actions.indexOf(actionName);\n      if (index > -1) {\n        return this.actions.splice(index, 1);\n      }\n    };\n\n    TwitterBot.prototype.allActions = function(groupName) {\n      var action, actions, _i, _len, _ref;\n      actions = [];\n      _ref = this.actions;\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        action = _ref[_i];\n        if (groupName) {\n          if (action.isPartOfGroup(groupName)) {\n            actions.push(action.name);\n          }\n        } else {\n          actions.push(action);\n        }\n      }\n      return actions;\n    };\n\n    TwitterBot.prototype.actionWithName = function(actionName) {\n      var action, _i, _len, _ref;\n      _ref = this.actions;\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        action = _ref[_i];\n        if (action.name === actionName) {\n          return action;\n        }\n      }\n      return null;\n    };\n\n    TwitterBot.prototype.randomAction = function(groupName) {\n      var actionItem, actions;\n      actions = this.allActions(groupName);\n      actionItem = actions[Math.floor(Math.random() * actions.length)];\n      return actionItem;\n    };\n\n    TwitterBot.prototype.randomWeightedAction = function(groupName) {\n      var action, i, weight, weightedActions, _i, _j, _len, _ref;\n      weightedActions = [];\n      _ref = this.actions;\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        action = _ref[_i];\n        weight = action.getWeight();\n        for (i = _j = 0; 0 <= weight ? _j <= weight : _j >= weight; i = 0 <= weight ? ++_j : --_j) {\n          weightedActions.push(action.name);\n        }\n      }\n      return weightedActions[Math.floor(Math.random() * weightedActions.length)];\n    };\n\n    TwitterBot.prototype.startStreaming = function() {\n      return this.streamAction.start();\n    };\n\n    TwitterBot.prototype.stopStreaming = function() {\n      return this.streamAction.stop();\n    };\n\n    TwitterBot.prototype.listen = function(name, match, action) {\n      return this.streamAction.listen(name, match, action);\n    };\n\n    TwitterBot.prototype.schedule = function(action, timeout, tweet) {\n      if (!timeout) {\n        return this.now(action);\n      }\n    };\n\n    TwitterBot.prototype.now = function(action, tweet) {\n      if (typeof action === \"string\") {\n        action = this.actionWithName(action);\n      } else if (typeof action === \"function\") {\n        action = new TwitterBotAction(callback, this);\n      }\n      return action.emit(\"action\", this.twitter, tweet);\n    };\n\n    return TwitterBot;\n\n  })(eventEmitter);\n\n  module.exports.TwitterBot = TwitterBot;\n\n  eventEmitter = require('events').EventEmitter;\n\n  TwitterBotAction = (function(_super) {\n    __extends(TwitterBotAction, _super);\n\n    function TwitterBotAction(action, owner) {\n      var _this = this;\n      this.owner = owner;\n      this.on(\"action\", function(twitter, tweet) {\n        return action(twitter, _this, tweet);\n      });\n      this.init();\n      this.groups = [];\n      this._weight = 0;\n    }\n\n    TwitterBotAction.prototype.init = function() {};\n\n    TwitterBotAction.prototype.group = function(groupName) {\n      this.groups.push(groupName);\n      return this;\n    };\n\n    TwitterBotAction.prototype.ungroup = function(groupName) {\n      var index;\n      index = this.groups.indexOf(groupName);\n      if (index > -1) {\n        this.groups.splice(index, 1);\n      }\n      return this;\n    };\n\n    TwitterBotAction.prototype.isPartOfGroup = function(groupName) {\n      return this.groups.indexOf(groupName) > -1;\n    };\n\n    TwitterBotAction.prototype.weight = function(_weight) {\n      this._weight = _weight;\n      return this;\n    };\n\n    TwitterBotAction.prototype.getWeight = function() {\n      return this._weight;\n    };\n\n    TwitterBotAction.prototype.schedule = function(timeout, tweet) {\n      return this.owner.schedule(this, timeout);\n    };\n\n    TwitterBotAction.prototype.now = function(tweet) {\n      return this.owner.now(this, tweet);\n    };\n\n    return TwitterBotAction;\n\n  })(eventEmitter);\n\n  module.exports.TwitterBotAction = TwitterBotAction;\n\n  eventEmitter = require('events').EventEmitter;\n\n  TwitterBotStreamAction = (function(_super) {\n    __extends(TwitterBotStreamAction, _super);\n\n    function TwitterBotStreamAction() {\n      _ref = TwitterBotStreamAction.__super__.constructor.apply(this, arguments);\n      return _ref;\n    }\n\n    TwitterBotStreamAction.prototype.init = function() {\n      var _this = this;\n      this.streams = {};\n      this.on(\"start\", function() {\n        return _this.start();\n      });\n      this.on(\"stop\", function() {\n        return _this.stream.stop();\n      });\n      return this.stream_path = \"statuses/sample\";\n    };\n\n    TwitterBotStreamAction.prototype.start = function() {\n      var _this = this;\n      this.stream = this.owner.twitter.stream(this.stream_path);\n      this.stream.on(\"tweet\", function(tweet) {\n        var key, value, _ref1;\n        _ref1 = _this.streams;\n        for (key in _ref1) {\n          value = _ref1[key];\n          if (value(tweet)) {\n            _this.emit(\"stream-\" + key, _this.owner.twitter, tweet);\n          }\n        }\n        return tweet;\n      });\n      return this;\n    };\n\n    TwitterBotStreamAction.prototype.stop = function() {\n      return this.emit(\"stop\");\n    };\n\n    TwitterBotStreamAction.prototype.listen = function(name, match, callback) {\n      var action,\n        _this = this;\n      action = new TwitterBotAction(callback, this.owner);\n      this.streams[name] = match;\n      return this.on(\"stream-\" + name, function(twitter, tweet) {\n        return action.emit(\"action\", twitter, tweet);\n      });\n    };\n\n    TwitterBotStreamAction.prototype.setStreamPath = function(stream_path) {\n      this.stream_path = stream_path;\n      return this;\n    };\n\n    TwitterBotStreamAction.prototype.getStreamPath = function() {\n      return this.stream_path;\n    };\n\n    return TwitterBotStreamAction;\n\n  })(TwitterBotAction);\n\n  module.exports.TwitterBotStreamAction = TwitterBotStreamAction;\n\n}).call(this);\n"}